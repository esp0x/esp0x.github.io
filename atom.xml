<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://esp0x.github.io</id>
    <title>Esp0x</title>
    <updated>2021-07-27T05:24:55.126Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://esp0x.github.io"/>
    <link rel="self" href="https://esp0x.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://esp0x.github.io/images/avatar.png</logo>
    <icon>https://esp0x.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Esp0x</rights>
    <entry>
        <title type="html"><![CDATA[使用Fail2Ban防御SSH暴力破解攻击]]></title>
        <id>https://esp0x.github.io/post/shi-yong-fail2ban-fang-yu-ssh-bao-li-po-jie-gong-ji/</id>
        <link href="https://esp0x.github.io/post/shi-yong-fail2ban-fang-yu-ssh-bao-li-po-jie-gong-ji/">
        </link>
        <updated>2021-07-23T01:24:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装">安装</h2>
<pre><code class="language-shell"># sudo apt install fail2ban
# sudo systemctl enable fail2ban
</code></pre>
<h2 id="详细配置">详细配置</h2>
<pre><code class="language-shell">$ ls -alps /etc/fail2ban/
total 84
 4 drwxr-xr-x   6 root root  4096 Jul 22 18:16 ./
12 drwxr-xr-x 135 root root 12288 Jul 22 18:04 ../
 4 drwxr-xr-x   2 root root  4096 Jul 22 18:04 action.d/
 4 -rw-r--r--   1 root root  2817 Jan 11  2020 fail2ban.conf
 4 drwxr-xr-x   2 root root  4096 Mar  2  2020 fail2ban.d/
 4 drwxr-xr-x   3 root root  4096 Jul 22 18:04 filter.d/
28 -rw-r--r--   1 root root 25738 Jul 22 18:14 jail.conf
 4 drwxr-xr-x   2 root root  4096 Jul 22 18:04 jail.d/
 4 -rw-r--r--   1 root root   139 Jul 22 18:16 jail.local
 4 -rw-r--r--   1 root root   645 Jan 11  2020 paths-arch.conf
 4 -rw-r--r--   1 root root  2827 Jan 11  2020 paths-common.conf
 4 -rw-r--r--   1 root root   573 Jan 11  2020 paths-debian.conf
 4 -rw-r--r--   1 root root   738 Jan 11  2020 paths-opensuse.conf

# 默认情况下，fail2ban会使用jail.conf作为配置文件，但是一般不推荐
# 推荐的方式是，创建.local配置

$ sudo vi /etc/fail2ban/jail.local
[sshd]
enabled = true
port = ssh
filter = sshd                            // 查询的字段
logpath = /var/log/auth.log              // fail2ban会查询这个文件中sshd关键字
maxretry = 3
findtime = 300                           // 失败尝试的间隔
bantime = 3600                           // ban的时间
ignoreip = 127.0.0.1

$ sudo systemctl restart fail2ban.service
$ sudo fail2ban-client status
$ sudo fail2ban-client status sshd
</code></pre>
<h2 id="测试">测试</h2>
<pre><code class="language-shell">$ ssh root@ip // 尝试输入错误的密码，并重复登陆几次

$ ssh root@ip // 尝试次数到后，应当能够看到再次连接时，不会再出现密码提示，而是直接拒绝连接或连接超时

# 查询被ban的ip信息
$ sudo fail2ban-client status sshd
Status for the jail: sshd
|- Filter
|  |- Currently failed:	0
|  |- Total failed:	3
|  `- File list:	/var/log/auth.log
`- Actions
   |- Currently banned:	1
   |- Total banned:	1
   `- Banned IP list:	192.168.80.1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用wfuzz进行web安全模糊测试]]></title>
        <id>https://esp0x.github.io/post/shi-yong-wfuzz-jin-xing-web-an-quan-mo-hu-ce-shi/</id>
        <link href="https://esp0x.github.io/post/shi-yong-wfuzz-jin-xing-web-an-quan-mo-hu-ce-shi/">
        </link>
        <updated>2021-07-21T17:52:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="安装方法">安装方法</h3>
<pre><code class="language-shell"># pip install wfuzz	
</code></pre>
<h3 id="帮助信息">帮助信息</h3>
<pre><code class="language-shell">wfuzz -w 字典 地址
wfuzz -w words.txt https://www.example.com/FUZZ    // 这里FUZZ是用于替换字典内容的变量，固定写法

# 使用字典文件
wfuzz -z file --zP fn=wordlist https://www.example.com/FUZZ
# 简写为下面这中
wfuzz -z file,wordlist https://www.example.com/FUZZ   

# 指定多个字典，-z和-w参数都可以支持多个字典
wfuzz -w wordlist1 -w wordlist2 -w wordlist3 URL/FUZZ/FUZ2Z.FUZ3Z    // 后面的变量也是固定写法

# 命令的返回值：
编号、响应状态码、响应报文行数、响应报文字数、响应报文正字符数、Payload
</code></pre>
<h3 id="基本过滤场景">基本过滤场景</h3>
<pre><code class="language-shell"># 根据某些返回状态码进行过滤输出，比如不要显示404的结果
wfuzz -w wordlist --hc 404 http://www.example.com/FUZZ
# 过滤多个状态码
wfuzz -w wordlist --hc 404,403 http://www.example.com/FUZZ

# 使用状态码过滤后，往往结果还是很多，那么可以根据输出结果，对返回的报文字数、行数、字符数进行过滤
# --hl 过滤报文行数
# --hw 过滤字数
# --hh 过滤字符数
</code></pre>
<h3 id="爆破文件和目录">爆破文件和目录</h3>
<pre><code class="language-shell"># wfuzz -w wordlist URL/FUZZ.php

# wfuzz -w wordlist URL/FUZZ
</code></pre>
<h3 id="纯数字遍历枚举参数">纯数字遍历枚举参数</h3>
<pre><code class="language-shell"># wfuzz -z range,000-999 URL/some.php?uid=FUZZ
</code></pre>
<h3 id="post请求测试">POST请求测试</h3>
<pre><code class="language-shell"># 对于没有验证码的登陆爆破，可以使用bp截取数据包，获取传输数据的格式
# 比如为：username=&amp;password=
wfuzz -w userlist -w passwdlist -d &quot;username=FUZZ&amp;password=FUZZ&quot; URL/login.php
</code></pre>
<h3 id="携带cookie进行测试">携带Cookie进行测试</h3>
<pre><code class="language-shell"># 使用-b参数指定cookie，每个kv需要一个-b参数
wfuzz -z file,wordlist -b cookie1=value1 -b cookie2=value2 URL/FUZZ
</code></pre>
<h3 id="指定http请求方法">指定HTTP请求方法</h3>
<pre><code class="language-shell">wfuzz -z,list,GET-HEAD-POST-TRACE-OPTIONS -X FUZZ URL

# 这里使用list模块，每个方法会传到FUZZ变量中进行测试
# 列表成员必须以-分割才能识别
</code></pre>
<h3 id="使用代理">使用代理</h3>
<pre><code class="language-shell">wfuzz -w wordlist -p proxtHost:proxyPort:TYPE URL/FUZZ
</code></pre>
<h3 id="认证">认证</h3>
<pre><code class="language-shell"># 三种认证方式
# --basic
# --ntml
# --digest
wfuzz -z,list,&quot;username-password&quot; --basic FUZZ:FUZZ URL
</code></pre>
<h3 id="递归测试">递归测试</h3>
<pre><code class="language-shell"># 简单说就是找到匹配字典的路径后，在这个路径下再寻找符合字典的东东
# -R 后面是递归的次数
wfuzz -z list,&quot;admin-login.php-test-dorabox&quot; -R 1 http://127.0.0.1/FUZZ
</code></pre>
<h3 id="并发和请求间隔">并发和请求间隔</h3>
<pre><code class="language-shell">-t 设置并发请求数，可以用于测试竞态条件
-s 设置每次HTTP请求之间的间隔
</code></pre>
<h3 id="保存结果">保存结果</h3>
<pre><code class="language-shell"># 支持的格式
raw       | `Raw` output format
json      | Results in `json` format
csv       | `CSV` printer ftw
magictree | Prints results in `magictree` format
html      | Prints results in `html` format

# 使用-f参数，文件路径,文件格式
wfuzz -f outfile,json -w wordlist URL/FUZZ
</code></pre>
<h3 id="其他高级用法">其他高级用法</h3>
<pre><code class="language-shell">... 未完待续 ...
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用cheetah快速破解一句话木马]]></title>
        <id>https://esp0x.github.io/post/shi-yong-cheetah-kuai-su-po-jie-yi-ju-hua-mu-ma/</id>
        <link href="https://esp0x.github.io/post/shi-yong-cheetah-kuai-su-po-jie-yi-ju-hua-mu-ma/">
        </link>
        <updated>2021-07-20T00:30:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="项目地址">项目地址</h3>
<h4 id="httpsgithubcomsunnyelfcheetah">https://github.com/sunnyelf/cheetah</h4>
<h3 id="功能特点">功能特点</h3>
<pre><code class="language-shell">速度极快
支持批量爆破
自动伪造请求
自动探测web服务设置相关参数
支持读取和去重超大密码字典文件
支持python 2.x和3.x
目前支持php，jsp，asp，aspx类型的webshell
</code></pre>
<h3 id="帮助信息">帮助信息</h3>
<pre><code class="language-shell">_________________________________________________  ______              _____         ______ __________ /_ _____ _____ __ /_______ ____  /_ _  ___/__ __ \_  _ \_  _ \_  __/_  __ \ __  __ \
/ /__  _  / / //  __// __// /_ / /_/ / _ / / /
\___/  / / /_/ \___/ \___/ \__/  \____/  / / /_/  /_/                               /_/ a very fast brute force webshell password tool.

usage: cheetah.py [-h] [-i] [-v] [-c] [-up] [-r] [-w] [-s] [-n] [-u] [-b]  [-p [file [file ...]]] 可选参数:
  -h, --help            显示帮助信息并退出
  -i, --info            显示程序信息并退出
  -v, --verbose         启用详细输出模式(默认禁用)
  -c, --clear           去重字典文件(默认禁用)
  -up, --update         更新cheetah
  -r , --request        指定请求方式(默认POST方式)
  -w , --webshell       指定webshell类型(默认自动探测)
  -s , --server         指定web服务器名称(默认自动探测)
  -n , --number         指定一次请求参数的数量(默认自动设置)
  -u , --url            指定webshell url地址
  -b , --url-file       指定批量webshell urls文件
  -p [file [file ...]]  指定多个字典文件(默认使用pwd.list)
</code></pre>
<h3 id="项目结构">项目结构</h3>
<pre><code class="language-shell">cheetah:
│  .codeclimate.yml
│  .gitignore
│  .travis.yml
│  cheetah.py              mian program
│  LICENSE
│  README.md
│  README_zh.md
│  update.py               update module
│
├─data 
│      big_shell_pwd.7z   big shell password file
│      pwd.list           default shell password file
│      url.list           default batch webshell urls file
│      user-agent.list    user agent file
│
└─images
        1.png
        2.png
        3.png
        4.png
        logo.jpg
</code></pre>
<h3 id="使用场景">使用场景</h3>
<pre><code class="language-shell">  # 使用示例:
  # 测试单个地址
  python cheetah.py -u http://orz/orz.php
  
  # 使用post方法，限制单次请求的参数数量为1000，并显示详细信息
  python cheetah.py -u http://orz/orz.jsp -r post -n 1000 -v
  
  # 使用get方法，指定字典文件并去重
  python cheetah.py -u http://orz/orz.asp -r get -c -p pwd.list
  
  # 指定服务类型
  python cheetah.py -u http://orz/orz -w aspx -s apache -n 1000
  
  # 同时破解多个地址
  python cheetah.py -b url.list -c -p pwd1.list pwd2.list -v 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CMSmap使用简单说明]]></title>
        <id>https://esp0x.github.io/post/cmsmap-shi-yong-jian-dan-shuo-ming/</id>
        <link href="https://esp0x.github.io/post/cmsmap-shi-yong-jian-dan-shuo-ming/">
        </link>
        <updated>2021-07-19T05:31:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="安装">安装</h3>
<pre><code class="language-shell">git clone https://github.com/Dionach/CMSmap
cd CMSmap
pip3 install .
</code></pre>
<h3 id="功能简介">功能简介</h3>
<h4 id="1-检测目标网站的cms类型支持wordpress-joomla-drupal等插件">1. 检测目标网站的CMS类型，支持wordpress、joomla、drupal等插件</h4>
<h4 id="2-支持多线程扫描">2. 支持多线程扫描</h4>
<h4 id="3-集成了暴力破解模块">3. 集成了暴力破解模块</h4>
<h4 id="4-利用exploit-db数据库进行漏洞插件的检测">4. 利用exploit-db数据库进行漏洞插件的检测</h4>
<h3 id="帮助信息">帮助信息</h3>
<pre><code class="language-shell">usage: cmsmap [-f W/J/D] [-F] [-t] [-a] [-H] [-i] [-o] [-E] [-d] [-u] [-p]
              [-x] [-k] [-w] [-v] [-h] [-D] [-U W/J/D]
              [target]

CMSmap tool v1.0 - Simple CMS Scanner
Author: Mike Manzotti

Scan:
  target                target URL (e.g. 'https://example.com:8080/')
  -f W/J/D, --force W/J/D
                        force scan (W)ordpress, (J)oomla or (D)rupal
  -F, --fullscan        full scan using large plugin lists. False positives and slow!
  -t , --threads        number of threads (Default 5)
  -a , --agent          set custom user-agent
  -H , --header         add custom header (e.g. 'Authorization: Basic ABCD...')
  -i , --input          scan multiple targets listed in a given file
  -o , --output         save output in a file
  -E, --noedb           enumerate plugins without searching exploits
  -c, --nocleanurls     disable clean urls for Drupal only
  -s, --nosslcheck      don't validate the server's certificate
  -d, --dictattack      run low intense dictionary attack during scanning (5 attempts per user)

Brute-Force:
  -u , --usr            username or username file
  -p , --psw            password or password file
  -x, --noxmlrpc        brute forcing WordPress without XML-RPC

Post Exploitation:
  -k , --crack          password hashes file (Require hashcat installed. For WordPress and Joomla only)
  -w , --wordlist       wordlist file

Others:
  -v, --verbose         verbose mode (Default false)
  -h, --help            show this help message and exit
  -D, --default         rum CMSmap with default options
  -U, --update          use (C)MSmap, (P)lugins or (PC) for both

Examples:
  cmsmap.py https://example.com
  cmsmap.py https://example.com -f W -F --noedb -d
  cmsmap.py https://example.com -i targets.txt -o output.txt
  cmsmap.py https://example.com -u admin -p passwords.txt
  cmsmap.py -k hashes.txt -w passwords.txt
</code></pre>
<h3 id="使用场景">使用场景</h3>
<pre><code class="language-shell">// 默认参数执行，第一次执行会下载很多插件
# ./cmsmap.py http://www.wordpress.com

// 使用admin用户进行暴力破解，后面-v和-o不是必须的
# ./cmsmap.py http://www.wordpress.com -u admin -p &lt;字典路径&gt; -v -o &lt;结果保持的路径&gt;

// 同时扫描多个目标
# ./cmsmap.py http://www.wordpress.com -i &lt;目标文件路径&gt; -u admin -p &lt;字典路径&gt; -v -o &lt;结果保持的路径&gt;

// 注意：子弹和目标文件都是一行一个
// 其他使用方法待后续更新......
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MSF中使用枚举模块进行各种服务登陆的破解]]></title>
        <id>https://esp0x.github.io/post/msf-zhong-shi-yong-mei-ju-mo-kuai-jin-xing-ge-chong-fu-wu-deng-lu-de-po-jie/</id>
        <link href="https://esp0x.github.io/post/msf-zhong-shi-yong-mei-ju-mo-kuai-jin-xing-ge-chong-fu-wu-deng-lu-de-po-jie/">
        </link>
        <updated>2021-07-16T02:15:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="模块路径列表">模块路径列表</h3>
<pre><code class="language-shell">auxiliary/scanner/ftp/ftp_login
auxiliary/scanner/ssh/ssh_login
auxiliary/scanner/telnet/telnet_login
auxiliary/scanner/smb/smb_login
auxiliary/scanner/mssql/mssql_login
auxiliary/scanner/mysql/mysql_login
auxiliary/scanner/oracle/oracle_login
auxiliary/scanner/postgres/postgres_login
auxiliary/scanner/vnc/vnc_login
auxiliary/scanner/pcanywhere/pcanywhere_login
auxiliary/scanner/snmp/snmp_login
</code></pre>
<h3 id="使用方法">使用方法</h3>
<pre><code class="language-shell"># msfconsole

&gt; use &lt;模块路径&gt;
&gt; show options
&gt; set &lt;option&gt; &lt;value&gt;
&gt; run
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hydra暴力破解工具简单使用说明]]></title>
        <id>https://esp0x.github.io/post/hydra-bao-li-po-jie-gong-ju-jian-dan-shi-yong-shuo-ming/</id>
        <link href="https://esp0x.github.io/post/hydra-bao-li-po-jie-gong-ju-jian-dan-shi-yong-shuo-ming/">
        </link>
        <updated>2021-07-16T00:39:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="支持的破解协议">支持的破解协议</h3>
<h4 id="afpcisco-aaacisco身份验证cisco启用cvsfirebirdftphttp-form-gethttp-form-posthttp-gethttp-headhttp-proxyhttps-form-gethttps-form-posthttps-gethttps-headhttp-proxyicqimapircldapms-sqlmysqlncpnntporacle-listeneroracle-sidoraclepc-anywhere-pcnfspop3postgresrdprexecrloginrshsap-r3sipsmbsmtpsmtp枚举snmpsocks5sshv1和v2subversionteamspeakts2telnetvmware-auth-vnc和xmpp">AFP，Cisco AAA，Cisco身份验证，Cisco启用，CVS，Firebird，FTP，HTTP-FORM-GET，HTTP-FORM-POST，HTTP-GET，HTTP-HEAD，HTTP-PROXY，HTTPS-FORM- GET，HTTPS-FORM-POST，HTTPS-GET，HTTPS-HEAD，HTTP-Proxy，ICQ，IMAP，IRC，LDAP，MS-SQL，MYSQL，NCP，NNTP，Oracle Listener，Oracle SID，Oracle，PC-Anywhere， PCNFS，POP3，POSTGRES，RDP，Rexec，Rlogin，Rsh，SAP / R3，SIP，SMB，SMTP，SMTP枚举，SNMP，SOCKS5，SSH（v1和v2），Subversion，Teamspeak（TS2），Telnet，VMware-Auth ，VNC和XMPP。</h4>
<h3 id="参数列表">参数列表</h3>
<pre><code class="language-shell">-R：继续从上一次进度接着破解
-S：大写，采用SSL链接
-s  &lt;PORT&gt;：小写，可通过这个参数指定非默认端口
-l  &lt;LOGIN&gt;：指定破解的用户，对特定用户破解
-L  &lt;FILE&gt;：指定用户名字典
-p  &lt;PASS&gt;：小写，指定密码破解，少用，一般是采用密码字典
-P  &lt;FILE&gt;：大写，指定密码字典
-e  &lt;ns&gt;：可选选项，n：空密码试探，s：使用指定用户和密码试探
-C  &lt;FILE&gt;：使用冒号分割格式，例如“登录名:密码”来代替 -L/-P 参数
-M  &lt;FILE&gt;：指定目标列表文件一行一条
-o  &lt;FILE&gt;：指定结果输出文件
-f ：在使用-M参数以后，找到第一对登录名或者密码的时候中止破解
-t &lt;TASKS&gt;：同时运行的线程数，默认为16
-w &lt;TIME&gt;：设置最大超时的时间，单位秒，默认是30s
-v / -V：显示详细过程
server：目标ip
service：指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http[s]-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh2 smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等
OPT：可选项
</code></pre>
<h3 id="使用场景">使用场景</h3>
<h3 id="破解ssh">破解SSH</h3>
<pre><code class="language-shell"># hydra -L users.txt -P password.txt -t 1 -vV -e ns 192.168.1.104 ssh
# hydra -L users.txt -P password.txt -t 1 -vV -e ns -o save.log 192.168.1.104 ssh
</code></pre>
<h3 id="破解ftp">破解FTP</h3>
<pre><code class="language-shell"># hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV
# hydra ip ftp -l 用户名 -P 密码字典 -e ns -vV
</code></pre>
<h3 id="破解http">破解HTTP</h3>
<pre><code class="language-shell">// get 方式提交，破解web登陆
# hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/
# hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php

// post 方式提交(这里有两种，根据实际情况来构成命令)
// 需要提前采集认证通信时的数据包，以便确定参数名称
# hydra -l admin -P pass.lst -o ok.lst -t 1 -f 127.0.0.1 http-post-form &quot;index.php:name=^USER^&amp;pwd=^PASS^:&lt;title&gt;invalido&lt;/title&gt;&quot;
# hydra -L user.txt \
			-P passwd.txt \
			-o http_get.txt \
			-vV 10.96.10.208 \
			http-get-form  &quot;/vulnerabilities/brute/:username=^USER^&amp;password=^PASS^&amp;Login=Login:F=Username and/or password incorrect:H=Cookie: PHPSESSID=nvvrgk2f84qhnh43cm28pt42n6; security=low&quot; \
			-t 3
USER^和^
PASS^代表是攻击载荷，
F=后面是代表密码错误时的关键字符串 ，
H后面是cookie信息
</code></pre>
<h3 id="破解https">破解HTTPS</h3>
<pre><code class="language-shell"># hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https
</code></pre>
<h3 id="破解http-proxy">破解http-proxy</h3>
<pre><code class="language-shell"># hydra -l admin -P pass.txt http-proxy://10.36.16.18
</code></pre>
<h3 id="破解smb">破解SMB</h3>
<pre><code class="language-shell"># hydra -l administrator -P pass.txt 10.36.16.18 smb
</code></pre>
<h3 id="破解3389远程登陆">破解3389远程登陆</h3>
<pre><code class="language-shell"># hydra ip rdp -l administrator -P pass.txt -V
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublist3r子域名扫描工具使用说明]]></title>
        <id>https://esp0x.github.io/post/sublist3r-zi-yu-ming-sao-miao-gong-ju-shi-yong-shuo-ming/</id>
        <link href="https://esp0x.github.io/post/sublist3r-zi-yu-ming-sao-miao-gong-ju-shi-yong-shuo-ming/">
        </link>
        <updated>2021-07-15T02:54:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="安装方式">安装方式</h3>
<pre><code class="language-shell">// 源码使用
# git clone https://github.com/aboul3la/Sublist3r.git
# cd Sublist3r
# pip install -r requirements.txt

// Kali Linux安装
# apt update
# apt install sublist3r
# sublist3r --help
</code></pre>
<h3 id="工具帮助信息">工具帮助信息</h3>
<pre><code class="language-shell">usage: sublist3r.py [-h] -d DOMAIN [-b [BRUTEFORCE]] [-p PORTS] [-v [VERBOSE]] [-t THREADS] [-e ENGINES] [-o OUTPUT] [-n]

OPTIONS:
  -h, --help            show this help message and exit
  -d DOMAIN, --domain DOMAIN
                        Domain name to enumerate it's subdomains
  -b [BRUTEFORCE], --bruteforce [BRUTEFORCE]
                        Enable the subbrute bruteforce module
  -p PORTS, --ports PORTS
                        Scan the found subdomains against specified tcp ports
  -v [VERBOSE], --verbose [VERBOSE]
                        Enable Verbosity and display results in realtime
  -t THREADS, --threads THREADS
                        Number of threads to use for subbrute bruteforce
  -e ENGINES, --engines ENGINES
                        Specify a comma-separated list of search engines
  -o OUTPUT, --output OUTPUT
                        Save the results to text file
  -n, --no-color        Output without color

Example: python3 /usr/lib/python3/dist-packages/sublist3r.py -d google.com
</code></pre>
<h3 id="使用场景">使用场景</h3>
<pre><code class="language-shell">// 扫描子域名
# sublist3r -d qq.com

// 扫描子域名，并显示开放了80和443端口的子域名
# sublist3r -d qq.com -p 80, 443

// 输出到文件
# sublist3r -d qq.com -o filename.txt

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SubDomainBrute.py工具的简单使用说明]]></title>
        <id>https://esp0x.github.io/post/subdomainbrutepy-gong-ju-de-jian-dan-shi-yong-shuo-ming/</id>
        <link href="https://esp0x.github.io/post/subdomainbrutepy-gong-ju-de-jian-dan-shi-yong-shuo-ming/">
        </link>
        <updated>2021-07-15T02:02:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="安装方法">安装方法</h3>
<pre><code class="language-shell"># git clone https://github.com/lijiejie/subDomainsBrute.git

// python3 用户
# pip3 install aiodns
// python2 用户
# pip install dnspython gevent

// 字典路径
# cd subDomainsBrute/dict
# ls
dns_servers.txt  next_sub_full.txt  next_sub.txt  subnames_all_5_letters.txt  subnames_full.txt  subnames.txt
</code></pre>
<h3 id="工具帮助说明">工具帮助说明</h3>
<pre><code class="language-shell">Usage: subDomainsBrute.py [options] target.com

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -f FILE               File contains new line delimited subs, default is
                        subnames.txt.
  --full                Full scan, NAMES FILE subnames_full.txt will be used
                        to brute
  -i, --ignore-intranet
                        Ignore domains pointed to private IPs
  -w, --wildcard        Force scan after wildcard test fail
  -t THREADS, --threads=THREADS
                        Num of scan threads, 200 by default
  -p PROCESS, --process=PROCESS
                        Num of scan Process, 6 by default
  -o OUTPUT, --output=OUTPUT
                        Output file name. default is {target}.txt
</code></pre>
<h3 id="使用场景">使用场景</h3>
<pre><code class="language-shell">// 简单扫描
# python3 subDomainsBrute.py qq.com

// 全量扫描,full参数会使用字典路径下的subnames_full.txt
# python3 subDoaminBrute.py --full qq.com
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 7/8 使用chrony进行时间同步配置]]></title>
        <id>https://esp0x.github.io/post/centos-78-shi-yong-chrony-jin-xing-shi-jian-tong-bu-pei-zhi/</id>
        <link href="https://esp0x.github.io/post/centos-78-shi-yong-chrony-jin-xing-shi-jian-tong-bu-pei-zhi/">
        </link>
        <updated>2021-07-14T01:25:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-安装">1. 安装</h3>
<pre><code class="language-shell"># yum -y install chrony
# systemctl enable chronyd
# systemctl start chronyd
</code></pre>
<h3 id="2配置">2.配置</h3>
<pre><code class="language-shell"># vi /etc/chrony.conf

# 使用 pool.ntp.org 项目中的公共服务器。以server开，理论上想添加多少时间服务器都可以。
# Use public servers from the pool.ntp.org project.
# Please consider joining the pool (http://www.pool.ntp.org/join.html).
server 0.centos.pool.ntp.org iburst
server 1.centos.pool.ntp.org iburst
server 2.centos.pool.ntp.org iburst
server 3.centos.pool.ntp.org iburst

# 根据实际时间计算出服务器增减时间的比率，然后记录到一个文件中，在系统重启后为系统做出最佳时间补偿调整。
# Record the rate at which the system clock gains/losses time.
driftfile /var/lib/chrony/drift

# 如果系统时钟的偏移量大于1秒，则允许系统时钟在前三次更新中步进。
# Allow the system clock to be stepped in the first three updates if its offset is larger than 1 second.
makestep 1.0 3

# 启用实时时钟（RTC）的内核同步。
# Enable kernel synchronization of the real-time clock (RTC).
rtcsync

# 通过使用 hwtimestamp 指令启用硬件时间戳
# Enable hardware timestamping on all interfaces that support it.
#hwtimestamp *

# Increase the minimum number of selectable sources required to adjust the system clock.
#minsources 2

# 指定 NTP 客户端地址，以允许或拒绝连接到扮演时钟服务器的机器
# Allow NTP client access from local network.
#allow 192.168.0.0/16

# Serve time even if not synchronized to a time source.
#local stratum 10

# 指定包含 NTP 身份验证密钥的文件。
# Specify file containing keys for NTP authentication.
#keyfile /etc/chrony.keys

# 指定日志文件的目录。
# Specify directory for log files.
logdir /var/log/chrony

# 选择日志文件要记录的信息。
# Select which information is logged.
#log measurements statistics tracking
</code></pre>
<h3 id="3手工同步">3.手工同步</h3>
<pre><code class="language-shell"># 查看 ntp_servers
chronyc sources -v

# 查看 ntp_servers 状态
chronyc sourcestats -v

# 查看 ntp_servers 是否在线
chronyc activity -v

# 查看 ntp 详细信息
chronyc tracking -v

# 手工进行同步
chronyc -a makestep
</code></pre>
<h3 id="4修改时区">4.修改时区</h3>
<pre><code class="language-shell"># 查看日期时间、时区及 NTP 状态
timedatectl

# 查看时区列表
timedatectl list-timezones
timedatectl list-timezones |  grep  -E &quot;Asia/S.*&quot;

# 修改时区
timedatectl set-timezone Asia/Shanghai

# 修改日期时间（可以只修改其中一个）
timedatectl set-time &quot;2019-09-19 15:50:20&quot;

# 开启 NTP
timedatectl set-ntp true/flase
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何避免在第一次SSH登陆时输入yes提示符]]></title>
        <id>https://esp0x.github.io/post/ru-he-bi-mian-zai-di-yi-ci-ssh-deng-lu-shi-shu-ru-yes-ti-shi-fu/</id>
        <link href="https://esp0x.github.io/post/ru-he-bi-mian-zai-di-yi-ci-ssh-deng-lu-shi-shu-ru-yes-ti-shi-fu/">
        </link>
        <updated>2021-06-23T03:46:19.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-shell">echo &quot;StrictHostKeyChecking no&quot; &gt;~/.ssh/config
</code></pre>
]]></content>
    </entry>
</feed>