<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://esp0x.github.io</id>
    <title>Esp0x</title>
    <updated>2021-07-16T04:01:45.076Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://esp0x.github.io"/>
    <link rel="self" href="https://esp0x.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://esp0x.github.io/images/avatar.png</logo>
    <icon>https://esp0x.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Esp0x</rights>
    <entry>
        <title type="html"><![CDATA[MSF中使用枚举模块进行各种服务登陆的破解]]></title>
        <id>https://esp0x.github.io/post/msf-zhong-shi-yong-mei-ju-mo-kuai-jin-xing-ge-chong-fu-wu-deng-lu-de-po-jie/</id>
        <link href="https://esp0x.github.io/post/msf-zhong-shi-yong-mei-ju-mo-kuai-jin-xing-ge-chong-fu-wu-deng-lu-de-po-jie/">
        </link>
        <updated>2021-07-16T02:15:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="模块路径列表">模块路径列表</h3>
<pre><code class="language-shell">auxiliary/scanner/ftp/ftp_login
auxiliary/scanner/ssh/ssh_login
auxiliary/scanner/telnet/telnet_login
auxiliary/scanner/smb/smb_login
auxiliary/scanner/mssql/mssql_login
auxiliary/scanner/mysql/mysql_login
auxiliary/scanner/oracle/oracle_login
auxiliary/scanner/postgres/postgres_login
auxiliary/scanner/vnc/vnc_login
auxiliary/scanner/pcanywhere/pcanywhere_login
auxiliary/scanner/snmp/snmp_login
</code></pre>
<h3 id="使用方法">使用方法</h3>
<pre><code class="language-shell"># msfconsole

&gt; use &lt;模块路径&gt;
&gt; show options
&gt; set &lt;option&gt; &lt;value&gt;
&gt; run
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hydra暴力破解工具简单使用说明]]></title>
        <id>https://esp0x.github.io/post/hydra-bao-li-po-jie-gong-ju-jian-dan-shi-yong-shuo-ming/</id>
        <link href="https://esp0x.github.io/post/hydra-bao-li-po-jie-gong-ju-jian-dan-shi-yong-shuo-ming/">
        </link>
        <updated>2021-07-16T00:39:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="支持的破解协议">支持的破解协议</h3>
<h4 id="afpcisco-aaacisco身份验证cisco启用cvsfirebirdftphttp-form-gethttp-form-posthttp-gethttp-headhttp-proxyhttps-form-gethttps-form-posthttps-gethttps-headhttp-proxyicqimapircldapms-sqlmysqlncpnntporacle-listeneroracle-sidoraclepc-anywhere-pcnfspop3postgresrdprexecrloginrshsap-r3sipsmbsmtpsmtp枚举snmpsocks5sshv1和v2subversionteamspeakts2telnetvmware-auth-vnc和xmpp">AFP，Cisco AAA，Cisco身份验证，Cisco启用，CVS，Firebird，FTP，HTTP-FORM-GET，HTTP-FORM-POST，HTTP-GET，HTTP-HEAD，HTTP-PROXY，HTTPS-FORM- GET，HTTPS-FORM-POST，HTTPS-GET，HTTPS-HEAD，HTTP-Proxy，ICQ，IMAP，IRC，LDAP，MS-SQL，MYSQL，NCP，NNTP，Oracle Listener，Oracle SID，Oracle，PC-Anywhere， PCNFS，POP3，POSTGRES，RDP，Rexec，Rlogin，Rsh，SAP / R3，SIP，SMB，SMTP，SMTP枚举，SNMP，SOCKS5，SSH（v1和v2），Subversion，Teamspeak（TS2），Telnet，VMware-Auth ，VNC和XMPP。</h4>
<h3 id="参数列表">参数列表</h3>
<pre><code class="language-shell">-R：继续从上一次进度接着破解
-S：大写，采用SSL链接
-s  &lt;PORT&gt;：小写，可通过这个参数指定非默认端口
-l  &lt;LOGIN&gt;：指定破解的用户，对特定用户破解
-L  &lt;FILE&gt;：指定用户名字典
-p  &lt;PASS&gt;：小写，指定密码破解，少用，一般是采用密码字典
-P  &lt;FILE&gt;：大写，指定密码字典
-e  &lt;ns&gt;：可选选项，n：空密码试探，s：使用指定用户和密码试探
-C  &lt;FILE&gt;：使用冒号分割格式，例如“登录名:密码”来代替 -L/-P 参数
-M  &lt;FILE&gt;：指定目标列表文件一行一条
-o  &lt;FILE&gt;：指定结果输出文件
-f ：在使用-M参数以后，找到第一对登录名或者密码的时候中止破解
-t &lt;TASKS&gt;：同时运行的线程数，默认为16
-w &lt;TIME&gt;：设置最大超时的时间，单位秒，默认是30s
-v / -V：显示详细过程
server：目标ip
service：指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http[s]-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh2 smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等
OPT：可选项
</code></pre>
<h3 id="使用场景">使用场景</h3>
<h3 id="破解ssh">破解SSH</h3>
<pre><code class="language-shell"># hydra -L users.txt -P password.txt -t 1 -vV -e ns 192.168.1.104 ssh
# hydra -L users.txt -P password.txt -t 1 -vV -e ns -o save.log 192.168.1.104 ssh
</code></pre>
<h3 id="破解ftp">破解FTP</h3>
<pre><code class="language-shell"># hydra ip ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV
# hydra ip ftp -l 用户名 -P 密码字典 -e ns -vV
</code></pre>
<h3 id="破解http">破解HTTP</h3>
<pre><code class="language-shell">// get 方式提交，破解web登陆
# hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/
# hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php

// post 方式提交(这里有两种，根据实际情况来构成命令)
// 需要提前采集认证通信时的数据包，以便确定参数名称
# hydra -l admin -P pass.lst -o ok.lst -t 1 -f 127.0.0.1 http-post-form &quot;index.php:name=^USER^&amp;pwd=^PASS^:&lt;title&gt;invalido&lt;/title&gt;&quot;
# hydra -L user.txt \
			-P passwd.txt \
			-o http_get.txt \
			-vV 10.96.10.208 \
			http-get-form  &quot;/vulnerabilities/brute/:username=^USER^&amp;password=^PASS^&amp;Login=Login:F=Username and/or password incorrect:H=Cookie: PHPSESSID=nvvrgk2f84qhnh43cm28pt42n6; security=low&quot; \
			-t 3
USER^和^
PASS^代表是攻击载荷，
F=后面是代表密码错误时的关键字符串 ，
H后面是cookie信息
</code></pre>
<h3 id="破解https">破解HTTPS</h3>
<pre><code class="language-shell"># hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https
</code></pre>
<h3 id="破解http-proxy">破解http-proxy</h3>
<pre><code class="language-shell"># hydra -l admin -P pass.txt http-proxy://10.36.16.18
</code></pre>
<h3 id="破解smb">破解SMB</h3>
<pre><code class="language-shell"># hydra -l administrator -P pass.txt 10.36.16.18 smb
</code></pre>
<h3 id="破解3389远程登陆">破解3389远程登陆</h3>
<pre><code class="language-shell"># hydra ip rdp -l administrator -P pass.txt -V
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublist3r子域名扫描工具使用说明]]></title>
        <id>https://esp0x.github.io/post/sublist3r-zi-yu-ming-sao-miao-gong-ju-shi-yong-shuo-ming/</id>
        <link href="https://esp0x.github.io/post/sublist3r-zi-yu-ming-sao-miao-gong-ju-shi-yong-shuo-ming/">
        </link>
        <updated>2021-07-15T02:54:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="安装方式">安装方式</h3>
<pre><code class="language-shell">// 源码使用
# git clone https://github.com/aboul3la/Sublist3r.git
# cd Sublist3r
# pip install -r requirements.txt

// Kali Linux安装
# apt update
# apt install sublist3r
# sublist3r --help
</code></pre>
<h3 id="工具帮助信息">工具帮助信息</h3>
<pre><code class="language-shell">usage: sublist3r.py [-h] -d DOMAIN [-b [BRUTEFORCE]] [-p PORTS] [-v [VERBOSE]] [-t THREADS] [-e ENGINES] [-o OUTPUT] [-n]

OPTIONS:
  -h, --help            show this help message and exit
  -d DOMAIN, --domain DOMAIN
                        Domain name to enumerate it's subdomains
  -b [BRUTEFORCE], --bruteforce [BRUTEFORCE]
                        Enable the subbrute bruteforce module
  -p PORTS, --ports PORTS
                        Scan the found subdomains against specified tcp ports
  -v [VERBOSE], --verbose [VERBOSE]
                        Enable Verbosity and display results in realtime
  -t THREADS, --threads THREADS
                        Number of threads to use for subbrute bruteforce
  -e ENGINES, --engines ENGINES
                        Specify a comma-separated list of search engines
  -o OUTPUT, --output OUTPUT
                        Save the results to text file
  -n, --no-color        Output without color

Example: python3 /usr/lib/python3/dist-packages/sublist3r.py -d google.com
</code></pre>
<h3 id="使用场景">使用场景</h3>
<pre><code class="language-shell">// 扫描子域名
# sublist3r -d qq.com

// 扫描子域名，并显示开放了80和443端口的子域名
# sublist3r -d qq.com -p 80, 443

// 输出到文件
# sublist3r -d qq.com -o filename.txt

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SubDomainBrute.py工具的简单使用说明]]></title>
        <id>https://esp0x.github.io/post/subdomainbrutepy-gong-ju-de-jian-dan-shi-yong-shuo-ming/</id>
        <link href="https://esp0x.github.io/post/subdomainbrutepy-gong-ju-de-jian-dan-shi-yong-shuo-ming/">
        </link>
        <updated>2021-07-15T02:02:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="安装方法">安装方法</h3>
<pre><code class="language-shell"># git clone https://github.com/lijiejie/subDomainsBrute.git

// python3 用户
# pip3 install aiodns
// python2 用户
# pip install dnspython gevent

// 字典路径
# cd subDomainsBrute/dict
# ls
dns_servers.txt  next_sub_full.txt  next_sub.txt  subnames_all_5_letters.txt  subnames_full.txt  subnames.txt
</code></pre>
<h3 id="工具帮助说明">工具帮助说明</h3>
<pre><code class="language-shell">Usage: subDomainsBrute.py [options] target.com

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -f FILE               File contains new line delimited subs, default is
                        subnames.txt.
  --full                Full scan, NAMES FILE subnames_full.txt will be used
                        to brute
  -i, --ignore-intranet
                        Ignore domains pointed to private IPs
  -w, --wildcard        Force scan after wildcard test fail
  -t THREADS, --threads=THREADS
                        Num of scan threads, 200 by default
  -p PROCESS, --process=PROCESS
                        Num of scan Process, 6 by default
  -o OUTPUT, --output=OUTPUT
                        Output file name. default is {target}.txt
</code></pre>
<h3 id="使用场景">使用场景</h3>
<pre><code class="language-shell">// 简单扫描
# python3 subDomainsBrute.py qq.com

// 全量扫描,full参数会使用字典路径下的subnames_full.txt
# python3 subDoaminBrute.py --full qq.com
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos 7/8 使用chrony进行时间同步配置]]></title>
        <id>https://esp0x.github.io/post/centos-78-shi-yong-chrony-jin-xing-shi-jian-tong-bu-pei-zhi/</id>
        <link href="https://esp0x.github.io/post/centos-78-shi-yong-chrony-jin-xing-shi-jian-tong-bu-pei-zhi/">
        </link>
        <updated>2021-07-14T01:25:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-安装">1. 安装</h3>
<pre><code class="language-shell"># yum -y install chrony
# systemctl enable chronyd
# systemctl start chronyd
</code></pre>
<h3 id="2配置">2.配置</h3>
<pre><code class="language-shell"># vi /etc/chrony.conf

# 使用 pool.ntp.org 项目中的公共服务器。以server开，理论上想添加多少时间服务器都可以。
# Use public servers from the pool.ntp.org project.
# Please consider joining the pool (http://www.pool.ntp.org/join.html).
server 0.centos.pool.ntp.org iburst
server 1.centos.pool.ntp.org iburst
server 2.centos.pool.ntp.org iburst
server 3.centos.pool.ntp.org iburst

# 根据实际时间计算出服务器增减时间的比率，然后记录到一个文件中，在系统重启后为系统做出最佳时间补偿调整。
# Record the rate at which the system clock gains/losses time.
driftfile /var/lib/chrony/drift

# 如果系统时钟的偏移量大于1秒，则允许系统时钟在前三次更新中步进。
# Allow the system clock to be stepped in the first three updates if its offset is larger than 1 second.
makestep 1.0 3

# 启用实时时钟（RTC）的内核同步。
# Enable kernel synchronization of the real-time clock (RTC).
rtcsync

# 通过使用 hwtimestamp 指令启用硬件时间戳
# Enable hardware timestamping on all interfaces that support it.
#hwtimestamp *

# Increase the minimum number of selectable sources required to adjust the system clock.
#minsources 2

# 指定 NTP 客户端地址，以允许或拒绝连接到扮演时钟服务器的机器
# Allow NTP client access from local network.
#allow 192.168.0.0/16

# Serve time even if not synchronized to a time source.
#local stratum 10

# 指定包含 NTP 身份验证密钥的文件。
# Specify file containing keys for NTP authentication.
#keyfile /etc/chrony.keys

# 指定日志文件的目录。
# Specify directory for log files.
logdir /var/log/chrony

# 选择日志文件要记录的信息。
# Select which information is logged.
#log measurements statistics tracking
</code></pre>
<h3 id="3手工同步">3.手工同步</h3>
<pre><code class="language-shell"># 查看 ntp_servers
chronyc sources -v

# 查看 ntp_servers 状态
chronyc sourcestats -v

# 查看 ntp_servers 是否在线
chronyc activity -v

# 查看 ntp 详细信息
chronyc tracking -v

# 手工进行同步
chronyc -a makestep
</code></pre>
<h3 id="4修改时区">4.修改时区</h3>
<pre><code class="language-shell"># 查看日期时间、时区及 NTP 状态
timedatectl

# 查看时区列表
timedatectl list-timezones
timedatectl list-timezones |  grep  -E &quot;Asia/S.*&quot;

# 修改时区
timedatectl set-timezone Asia/Shanghai

# 修改日期时间（可以只修改其中一个）
timedatectl set-time &quot;2019-09-19 15:50:20&quot;

# 开启 NTP
timedatectl set-ntp true/flase
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何避免在第一次SSH登陆时输入yes提示符]]></title>
        <id>https://esp0x.github.io/post/ru-he-bi-mian-zai-di-yi-ci-ssh-deng-lu-shi-shu-ru-yes-ti-shi-fu/</id>
        <link href="https://esp0x.github.io/post/ru-he-bi-mian-zai-di-yi-ci-ssh-deng-lu-shi-shu-ru-yes-ti-shi-fu/">
        </link>
        <updated>2021-06-23T03:46:19.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-shell">echo &quot;StrictHostKeyChecking no&quot; &gt;~/.ssh/config
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[K8s-Pod简单介绍]]></title>
        <id>https://esp0x.github.io/post/k8s-pod-jian-dan-jie-shao/</id>
        <link href="https://esp0x.github.io/post/k8s-pod-jian-dan-jie-shao/">
        </link>
        <updated>2021-06-08T07:06:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="概念">概念</h3>
<h5 id="在kubernetes集群中pod是所有业务类型的基础也是k8s管理的最小单位级它是一个或多个容器的组合-这些容器共享存储-网络和命名空间以及如何运行的规范-在pod中所有容器都被同一安排和调度并运行在共享的上下文中-对于具体应用而言pod是它们的逻辑主机pod包含业务相关的多个应用容器">在Kubernetes集群中，Pod是所有业务类型的基础，也是K8S管理的最小单位级，它是一个或多个容器的组合。这些容器共享存储、网络和命名空间，以及如何运行的规范。在Pod中，所有容器都被同一安排和调度，并运行在共享的上下文中。对于具体应用而言，Pod是它们的逻辑主机，Pod包含业务相关的多个应用容器。</h5>
<h3 id="两个注意点">两个注意点</h3>
<pre><code class="language-python">1.网络:
  每一个Pod都会被指派一个唯一的Ip地址，在Pod中的每一个容器共享网络命名空间，包括Ip地址和网络端口。在同一个Pod中的容器可以同locahost进行互相通信。当Pod中的容器需要与Pod外的实体进行通信时，则需要通过端口等共享的网络资源。

2.存储:
  Pod能够被指定共享存储卷的集合，在Pod中所有的容器能够访问共享存储卷，允许这些容器共享数据。存储卷也允许在一个Pod持久化数据，以防止其中的容器需要被重启。
</code></pre>
<h3 id="pod的生命周期">Pod的生命周期</h3>
<pre><code class="language-shel">一共有4种状态：

1. Pending：APIserver已经创建该server，但pod中有一个或多个容器的镜像还未创建，可能在下载中；
2. Running：Pod中的所有容器都已创建，且至少有一个容器处于运行状态，正在启动或重启状态；
3. Failed：Pod内所有容器都已退出，其中至少有一个容器退出失败；
4. Unknown：由于某种原因无法获取Pod的状态比如网络问题；
</code></pre>
<h3 id="pod的重启策略">Pod的重启策略</h3>
<pre><code class="language-py">重启策略对同一个Pod中的所有容器起作用，容器的重启由Node上的kubelet执行，支持三种策略，在配置文件中通过restartPolicy字段设置：
1. Always：只要退出就会重启
2. OnFailure：只有在失败退出时，才会重启
3. Never：只要退出，就不再重启

注意，这里的重启是指在Pod的宿主Node上进行本地重启，而不是调度到其它Node上。
</code></pre>
<h3 id="健康检查">健康检查</h3>
<pre><code class="language-shell"># 两种探针类型：
一、LivenessProbe探针：  判断容器是否存活（running）
1.ExecAction，在容器内部执行一个命令，状态返回码为0，表示健康，示例：
apiVersion: v1
kind: Pod
metadata:
 name: liveness
spec:
  containers:
  - name: liveness
    image: liveness
    args: 
    - /bin/sh
    - -c
    - echo ok &gt; /tmp/healthy: sleep 10; rm - rf /tmp/healthy; sleep 600
    livenessProbe:
      exec:
        command:
        - cat
        - /tmp/health
    initialDelaySeconds: 15
    timeoutSeconds: 1
    
2.TcpAction，通过IP和PORT，如果能够和容器建立连接则表示容器健康，示例：
apiVersion: v1
kind: Pod
metadata:
 name: pod-with-healthcheck
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - containerPort: 80
    livenessProbe:
      tcpSocket:
        port: 80
    initialDelaySeconds: 15
    timeoutSeconds: 1
3.HttpGetAction，发送get请求，返回码在200-400之间表示健康， 示例：
apiVersion: v1
kind: Pod
metadata:
 name: pod-with-healthcheck
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - containerPort: 80
    livenessProbe:
      httpGet:
        path: /_status/healthz  //请求路径
        port: 80
    initialDelaySeconds: 15
    timeoutSeconds: 1
    
二、ReadinessProbe探针： 用于判断容器是否启动完成（ready）
</code></pre>
<h3 id="pod的调度">Pod的调度</h3>
<pre><code class="language-shell"># 定向调度，nodeSelector
1.首先通过kubectl给node打上标签：
格式： kubectl label nodes &lt;node-name&gt; &lt;label-key&gt;=&lt;label-value&gt;
kubectl label nodes node1 zone=north

2.在pod定义里选择某个node
apiVersion: v1
kind: Pod
metadata:
name: pod-with-healthcheck
spec:
containers:
- name: nginx
  image: nginx
  ports:
  - containerPort: 80
nodeSelector:
  zone: north

# 亲和性和非亲和性
一、Node affinity（节点亲和性）
1. requiredDuringSchedulingIgnoredDuringExecution：
可认为一种强制限制，如果 Node 的标签发生了变化导致其没有符合 Pod 的调度要求节点，那么pod调度就会失败。
2.preferredDuringSchedulingIgnoredDuringExecution：
软限或偏好，同样如果 Node 的标签发生了变化导致其不再符合 pod 的调度要求，pod 依然会调度运行。

二、Pod Affinity（Pod亲和性）
    podAffinity用于调度pod可以和哪些pod部署在同一拓扑结构之下。而podAntiAffinity相反，其用于规定pod不可以和哪些pod部署在同一拓扑结构下。通过pod affinity与anti-affinity来解决pod和pod之间的关系。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[K8s-Namespace基本知识]]></title>
        <id>https://esp0x.github.io/post/namespace-ji-ben-zhi-shi/</id>
        <link href="https://esp0x.github.io/post/namespace-ji-ben-zhi-shi/">
        </link>
        <updated>2021-06-08T07:03:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="名词解释">名词解释</h3>
<h5 id="namespace是对一组资源和对象的抽象集合比如可用来将系统内部的对象划分为不同的项目或用户组-常见的podsservicesrc和deployments等都是属于某一个namespace的默认是default而nodepersistentvolumns等则不属于任何namespace">Namespace是对一组资源和对象的抽象集合，比如可用来将系统内部的对象划分为不同的项目或用户组。常见的pods，services，rc和deployments等都是属于某一个namespace的（默认是default），而node，persistentVolumns等则不属于任何namespace。</h5>
<h3 id="namespace相关操作">Namespace相关操作</h3>
<pre><code class="language-shell">kubectl可以通过–namespace或者-n选项指定namespace。如果不指定，默认为default。查看操作下,也可以通过设置–all-namespace=true来查看所有namespace下的资源。

# 查询ns
$ kubectl get namespaces
NAME          STATUS    AGE
default       Active    11d
kube-system   Active    11d

# 查询哪些资源位于namespace中
kubectl api-resources --namespaced=true
# 查看哪些资源不在命令空间
kubectl api-resources --namespaced=false

# 指定ns查询对应ns中的资源情况
kubectl get pods -n kube-system

# 创建
# 1.命令行直接创建
$ kubectl create namespace new-namespace

# 2.通过文件创建
$ cat my-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: new-namespace

$ kubectl create -f ./my-namespace.yaml

# 删除，即删除该ns下所有资源
# 注意：default和kube-system命名空间不能删除
$ kubectl delete namespaces new-namespace

# 切换ns
kubectl config set-context --current --namespace=kube-system
</code></pre>
<h3 id="关于namespace是否隔离网络">关于Namespace是否隔离网络</h3>
<h5 id="一般情况下默认是不会隔离网络流量的除非对某个namespace设置了安全策略">一般情况下，默认是不会隔离网络流量的，除非对某个namespace设置了安全策略。</h5>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[K8s-使用Minikube搭建本地学习环境]]></title>
        <id>https://esp0x.github.io/post/shi-yong-minikube-da-jian-ben-di-xue-xi-huan-jing/</id>
        <link href="https://esp0x.github.io/post/shi-yong-minikube-da-jian-ben-di-xue-xi-huan-jing/">
        </link>
        <updated>2021-06-08T07:02:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="安装kubectl">安装kubectl</h3>
<pre><code class="language-shell"># 注意：安装方法推荐参考官方网站，安装方式随着版本变更会发生变动
# 下载二进制文件
curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;
# 下载校验文件
curl -LO &quot;https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256&quot;
# 检查下载文件和校验文件是否匹配
echo &quot;$(&lt;kubectl.sha256) kubectl&quot; | sha256sum --check
# 安装二进制文件
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
# 检查安装是否成功
kubectl version --client
</code></pre>
<h3 id="安装minikube">安装Minikube</h3>
<pre><code class="language-shell"># 下载二进制文件
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
# 安装二进制文件
sudo install minikube-linux-amd64 /usr/local/bin/minikube
# 启动集群，启动之前需要确保系统中有容器运行时，比如docker，kvm，否则集群启动失败
minikube start

# 若出现：The &quot;docker&quot; driver should not be used with root privileges.
# 将当前具有sudo权限的用户添加到docker组即可
sudo usermod -aG docker &lt;username&gt;
# 激活组的配置，这步必须
newgrp docker
# 再次启动
minikube start
# 查看集群信息
kubectl cluster-info

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ansible-Playbook中使用copy来传输文件]]></title>
        <id>https://esp0x.github.io/post/playbook-zhong-shi-yong-copy-lai-chuan-shu-wen-jian/</id>
        <link href="https://esp0x.github.io/post/playbook-zhong-shi-yong-copy-lai-chuan-shu-wen-jian/">
        </link>
        <updated>2021-06-07T09:27:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="基本配置示例">基本配置示例</h3>
<pre><code class="language-shell">- hosts: all
    vars: 
      wss_url: http://10.77.10.125:8545 
    tasks:
      - name: &quot;推送配置文件&quot;
        template: src=/home/fm/ops/scripts/default.yaml dest=/etc/bee/default.yaml
      - name: &quot;send all scripts&quot;
        copy:
          src: '{{ item.src }}'
          dest: /tmp/
          owner: root
          group: root
          mode: 755
        with_items:
          - { src: '/home/fm/ops/scripts/start05.sh' }
          - { src: '/home/fm/ops/scripts/stop.sh' }
  
 
# 使用{{ item.src }}读取with_items中的数组元素，访问需要拷贝的每一个文件即可。

# 检查语法
ansible-playbook --syntax-check example.yaml
</code></pre>
]]></content>
    </entry>
</feed>